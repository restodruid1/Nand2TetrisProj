// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let length = 1;
            let string = Array.new(length);
        }
        else {
            let string = Array.new(maxLength);
            let length = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(string);
        //do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let string[length - 1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
		var int sum;
		var boolean neg;
		
		let sum = 0;
		if ((length > 0) & (string[0] = 45)) { //'-' sign in ascii
			let neg = true;
			let i = 1;
		}
		else {
			let neg = false;
			let i = 0;
		}
		
		while (i < length) {
			if (string[i] > 47 & string[i] < 58) { //the char is a digit between 0 to 9 in ascii
				let sum = (sum * 10) + (string[i] - 48);
			}
			let i = i + 1;
		}
		if (neg) {
			return -sum;
		}
		else {
			return sum;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let length = 0;
		if (val < 0) {
			let val = -val;
			do appendChar(45); 
		}
		do recSetInt(val);
		return;
    }
    
    method void recSetInt(int number) {
		var int mod;
		var int div;

		let div = number / 10;
		let mod = number - (div * 10);
		
		if (number < 10)
		{
			do appendChar(mod + 48);
		}
		else{
			do recSetInt(div);
			do appendChar(mod + 48);
		}
		return;
			
    }

    /** Returns the new line character. */
    function char newLine() {
        var char newLine;
        let newLine = 128;
        return newLine;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char backSpace;
        let backSpace = 129;
        return backSpace;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char doubleQuote;
        let doubleQuote = 34;
        return doubleQuote;
    }
}
