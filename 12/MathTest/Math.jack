// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;    // 2^0 = 1
        let twoToThe[1] = 2;    // 2^1 = 2
        let twoToThe[2] = 4;    // 2^2 = 4
        let twoToThe[3] = 8;    // 2^3 = 8
        let twoToThe[4] = 16;   
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;  // 2^15 = 32768
        return;
    }

    function int two_to_the(int power) {
		return twoToThe[power];
	}

    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let shiftedX = x;
        let sum = 0;
        let i = 0;
        
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var bool neg;
        if (x < 0 & y < 0) {
            let neg = false;
        }
        else {
            if (x > 0 & y > 0) {
                let neg = false;
            }
            else {
                let neg = true;
            }
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x | y < 0) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if (neg) {
            if ((x - ((q + q) * -y)) < y) {
                return -(q + q);
            }
            else {
                return -(q + q + 1);
            }
        }
        else {
            if ((x - ((q + q) * y)) < y) {
                return q + q;
            }
            else {
                return q + q + 1;
            }
        }
        
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y;
        var int approx;
        var int approx_squared;
        
        let y = 0;
        let j = 7;      // = #bits / 2 - 1
        while( ~(j < 0) ) {
            let approx = y + twoToThe[j];
            let approx_squared = approx * approx;
            if( ~(approx_squared > x) & (approx_squared > 0) ) {    
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
